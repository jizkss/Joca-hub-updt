-- CONFIGURAÇÃO
local IMAGE_ASSET_ID = "rbxassetid://115538776946656" -- Troque se necessário

-- SERVIÇOS
local UIS = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")

-- GUI PRINCIPAL
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "JocaHubGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = LocalPlayer.PlayerGui

-- ÍCONE DE ABRIR/FECHAR (ARRASTÁVEL)
local IconButton = Instance.new("ImageButton")
IconButton.Name = "OpenCloseButton"
IconButton.Size = UDim2.new(0, 52, 0, 52)
IconButton.Position = UDim2.new(0, 20, 1, -72)
IconButton.AnchorPoint = Vector2.new(0, 1)
IconButton.BackgroundTransparency = 1
IconButton.Image = IMAGE_ASSET_ID
IconButton.Parent = ScreenGui
IconButton.ZIndex = 10

-- Sombra Ícone
local IconShadow = Instance.new("ImageLabel")
IconShadow.Name = "IconShadow"
IconShadow.BackgroundTransparency = 1
IconShadow.Image = "rbxassetid://1316045217"
IconShadow.Size = UDim2.new(1, 22, 1, 22)
IconShadow.Position = UDim2.new(0, -11, 0, -11)
IconShadow.ImageTransparency = 0.30
IconShadow.ImageColor3 = Color3.new(0,0,0)
IconShadow.ZIndex = 9
IconShadow.Parent = IconButton

-- Arrasto do ícone
local iconDragging = false
local iconDragStart
local iconStartPos

IconButton.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        iconDragging = true
        iconDragStart = input.Position
        iconStartPos = IconButton.Position
    end
end)
IconButton.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        iconDragging = false
    end
end)
UIS.InputChanged:Connect(function(input)
    if iconDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - iconDragStart
        local newPos = iconStartPos + UDim2.new(0, delta.X, 0, delta.Y)
        newPos = UDim2.new(
            0, math.clamp(newPos.X.Offset, 0, ScreenGui.AbsoluteSize.X - IconButton.AbsoluteSize.X),
            0, math.clamp(newPos.Y.Offset, 0, ScreenGui.AbsoluteSize.Y - IconButton.AbsoluteSize.Y)
        )
        IconButton.Position = UDim2.new(0, newPos.X.Offset, 0, newPos.Y.Offset)
        IconButton.AnchorPoint = Vector2.new(0, 0)
        IconShadow.Position = UDim2.new(0, -11, 0, -11)
    end
end)

-- MENU PRINCIPAL
local MainFrame = Instance.new("Frame")
MainFrame.Name = "JocaHubMain"
MainFrame.Size = UDim2.new(0, 400, 0, 370)
MainFrame.Position = UDim2.new(0, 90, 1, -390)
MainFrame.AnchorPoint = Vector2.new(0, 1)
MainFrame.BackgroundColor3 = Color3.fromRGB(240, 240, 255)
MainFrame.BackgroundTransparency = 0.08
MainFrame.Visible = false
MainFrame.Parent = ScreenGui
MainFrame.Active = true

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 18)
MainCorner.Parent = MainFrame

local MainShadow = Instance.new("ImageLabel")
MainShadow.Name = "MainShadow"
MainShadow.BackgroundTransparency = 1
MainShadow.Image = "rbxassetid://1316045217"
MainShadow.Size = UDim2.new(1, 28, 1, 28)
MainShadow.Position = UDim2.new(0, -14, 0, -14)
MainShadow.ImageTransparency = 0.8
MainShadow.ImageColor3 = Color3.new(0,0,0)
MainShadow.ZIndex = 0
MainShadow.Parent = MainFrame

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Size = UDim2.new(1, 0, 0, 54)
Title.Position = UDim2.new(0, 0, 0, 0)
Title.BackgroundTransparency = 1
Title.Text = "Joca hub"
Title.Font = Enum.Font.GothamBold
Title.TextSize = 28
Title.TextColor3 = Color3.fromRGB(55, 20, 90)
Title.TextStrokeTransparency = 0.9
Title.TextYAlignment = Enum.TextYAlignment.Center
Title.TextXAlignment = Enum.TextXAlignment.Center
Title.Parent = MainFrame
Title.ZIndex = 2

-- Abas
local categories = {"ESP", "Aimbot", "Misc"}
local buttons, categoryFrames = {}, {}
local selectedCategory = 1

for i, name in ipairs(categories) do
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0, 90, 0, 34)
    btn.Position = UDim2.new(0, 40 + 110*(i-1), 0, 62)
    btn.BackgroundColor3 = i == 1 and Color3.fromRGB(220,200,255) or Color3.fromRGB(235,235,255)
    btn.TextColor3 = i == 1 and Color3.fromRGB(55, 20, 90) or Color3.fromRGB(60, 60, 80)
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 20
    btn.Text = name
    btn.Parent = MainFrame
    btn.ZIndex = 2
    btn.AutoButtonColor = true
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 10)
    btnCorner.Parent = btn
    buttons[i] = btn

    -- Frame de conteúdo da categoria
    local catFrame = Instance.new("Frame")
    catFrame.Size = UDim2.new(1, -40, 1, -120)
    catFrame.Position = UDim2.new(0, 40, 0, 108)
    catFrame.BackgroundTransparency = 1
    catFrame.Visible = i == 1
    catFrame.Parent = MainFrame
    catFrame.ZIndex = 2
    categoryFrames[i] = catFrame
end

-- Função para trocar abas
local function updateCategory(idx)
    selectedCategory = idx
    for i, btn in ipairs(buttons) do
        btn.BackgroundColor3 = i == idx and Color3.fromRGB(220,200,255) or Color3.fromRGB(235,235,255)
        btn.TextColor3 = i == idx and Color3.fromRGB(55, 20, 90) or Color3.fromRGB(60, 60, 80)
        categoryFrames[i].Visible = i == idx
    end
end
for i, btn in ipairs(buttons) do
    btn.MouseButton1Click:Connect(function()
        updateCategory(i)
    end)
end
updateCategory(1)

-- DRAG & DROP do menu
local dragging = false
local dragStart
local startPos
MainFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and input.Position.Y < MainFrame.AbsolutePosition.Y + 54 then
        dragging = true
        dragStart = input.Position
        startPos = MainFrame.Position
        MainFrame.BackgroundTransparency = 0.20
    end
end)
MainFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
        MainFrame.BackgroundTransparency = 0.08
    end
end)
UIS.InputChanged:Connect(function(input)
    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
        local delta = input.Position - dragStart
        local newPos = startPos + UDim2.new(0, delta.X, 0, delta.Y)
        newPos = UDim2.new(
            0, math.clamp(newPos.X.Offset, 0, ScreenGui.AbsoluteSize.X - MainFrame.AbsoluteSize.X),
            0, math.clamp(newPos.Y.Offset, 0, ScreenGui.AbsoluteSize.Y - MainFrame.AbsoluteSize.Y)
        )
        MainFrame.Position = UDim2.new(0, newPos.X.Offset, 0, newPos.Y.Offset)
        MainFrame.AnchorPoint = Vector2.new(0, 0)
    end
end)

-- ABRIR/FECHAR MENU PELO ÍCONE
IconButton.MouseButton1Click:Connect(function()
    MainFrame.Visible = not MainFrame.Visible
end)
UIS.InputBegan:Connect(function(input, gp)
    if not gp and input.KeyCode == Enum.KeyCode.Escape then
        MainFrame.Visible = false
    end
end)

-- =============== ABA ESP ================
local ESP_Ativo = false
local espColor = Color3.fromRGB(170,0,255)
local caixas = {}

local function criarESP(jogador)
    if jogador == LocalPlayer then return end
    if caixas[jogador] then caixas[jogador]:Destroy(); caixas[jogador] = nil end
    if jogador.Character and jogador.Character:FindFirstChild("HumanoidRootPart") then
        local highlight = Instance.new("Highlight")
        highlight.FillColor = espColor
        highlight.OutlineColor = espColor
        highlight.FillTransparency = 0.8
        highlight.OutlineTransparency = 0.1
        highlight.Adornee = jogador.Character
        highlight.Parent = jogador.Character
        caixas[jogador] = highlight
    end
end
local function removerESP()
    for jogador, highlight in pairs(caixas) do
        if highlight and highlight.Parent then highlight:Destroy() end
    end
    caixas = {}
end
local function monitorarJogador(jogador)
    if jogador == LocalPlayer then return end
    jogador.CharacterAdded:Connect(function(char)
        if ESP_Ativo then criarESP(jogador) end
    end)
end
for _, jogador in ipairs(Players:GetPlayers()) do monitorarJogador(jogador) end
Players.PlayerAdded:Connect(monitorarJogador)
Players.PlayerAdded:Connect(function(jogador) if ESP_Ativo then criarESP(jogador) end end)
Players.PlayerRemoving:Connect(function(jogador)
    if caixas[jogador] then caixas[jogador]:Destroy(); caixas[jogador] = nil end
end)
RunService.RenderStepped:Connect(function()
    if ESP_Ativo then
        for _, jogador in ipairs(Players:GetPlayers()) do
            if jogador ~= LocalPlayer and jogador.Character and not caixas[jogador] then
                criarESP(jogador)
            elseif caixas[jogador] and caixas[jogador].FillColor ~= espColor then
                caixas[jogador].FillColor = espColor
                caixas[jogador].OutlineColor = espColor
            end
        end
    end
end)

-- Texto de instrução
local espInfo = Instance.new("TextLabel")
espInfo.Size = UDim2.new(1, 0, 0, 50)
espInfo.Position = UDim2.new(0, 0, 0, 0)
espInfo.BackgroundTransparency = 1
espInfo.Text = "Pressione [H] para ativar/desativar o ESP\nEscolha a cor abaixo:"
espInfo.Font = Enum.Font.Gotham
espInfo.TextSize = 16
espInfo.TextColor3 = Color3.fromRGB(55, 20, 90)
espInfo.TextWrapped = true
espInfo.TextXAlignment = Enum.TextXAlignment.Center
espInfo.TextYAlignment = Enum.TextYAlignment.Center
espInfo.Parent = categoryFrames[1]

-- Botões de cor
local colorNames = {"Vermelho","Azul","Branco","Roxo"}
local colorValues = {Color3.fromRGB(255,0,0), Color3.fromRGB(0,90,255), Color3.fromRGB(255,255,255), Color3.fromRGB(170,0,255)}
for i=1,#colorNames do
    local colorBtn = Instance.new("TextButton")
    colorBtn.Size = UDim2.new(0, 75, 0, 28)
    colorBtn.Position = UDim2.new(0, 10 + (i-1)*90, 0, 55)
    colorBtn.BackgroundColor3 = colorValues[i]
    colorBtn.Text = colorNames[i]
    colorBtn.Font = Enum.Font.GothamBold
    colorBtn.TextSize = 14
    colorBtn.TextColor3 = (i == 3) and Color3.fromRGB(30,30,30) or Color3.fromRGB(255,255,255)
    colorBtn.Parent = categoryFrames[1]
    local btnCorner = Instance.new("UICorner")
    btnCorner.CornerRadius = UDim.new(0, 8)
    btnCorner.Parent = colorBtn
    colorBtn.MouseButton1Click:Connect(function()
        espColor = colorValues[i]
        for _,v in pairs(caixas) do
            v.FillColor = espColor
            v.OutlineColor = espColor
        end
    end)
end

-- Botão de toggle ESP (opcional, pois a tecla H já ativa/desativa)
local espButton = Instance.new("TextButton")
espButton.Size = UDim2.new(0, 160, 0, 40)
espButton.Position = UDim2.new(0.5, 0, 1, -55)
espButton.AnchorPoint = Vector2.new(0.5, 0)
espButton.BackgroundColor3 = Color3.fromRGB(220,200,255)
espButton.TextColor3 = Color3.fromRGB(55, 20, 90)
espButton.Font = Enum.Font.GothamBold
espButton.TextSize = 20
espButton.Text = "Ativar ESP"
espButton.Parent = categoryFrames[1]
local btnCorner = Instance.new("UICorner")
btnCorner.CornerRadius = UDim.new(0, 10)
btnCorner.Parent = espButton
espButton.MouseButton1Click:Connect(function()
    ESP_Ativo = not ESP_Ativo
    if ESP_Ativo then
        for _, jogador in ipairs(Players:GetPlayers()) do criarESP(jogador) end
        espButton.Text = "Desativar ESP"
        espButton.BackgroundColor3 = Color3.fromRGB(200,255,200)
    else
        removerESP()
        espButton.Text = "Ativar ESP"
        espButton.BackgroundColor3 = Color3.fromRGB(220,200,255)
    end
end)
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.H then
        ESP_Ativo = not ESP_Ativo
        if ESP_Ativo then
            for _, jogador in ipairs(Players:GetPlayers()) do criarESP(jogador) end
            espButton.Text = "Desativar ESP"
            espButton.BackgroundColor3 = Color3.fromRGB(200,255,200)
        else
            removerESP()
            espButton.Text = "Ativar ESP"
            espButton.BackgroundColor3 = Color3.fromRGB(220,200,255)
        end
    end
end)

-- =============== ABA AIMBOT ================
local aimbotEnabled = false
local aimbotModule -- referência para .Exit()

local aimbotButton = Instance.new("TextButton")
aimbotButton.Size = UDim2.new(0, 160, 0, 40)
aimbotButton.Position = UDim2.new(0.5, 0, 0.3, 0)
aimbotButton.AnchorPoint = Vector2.new(0.5, 0)
aimbotButton.BackgroundColor3 = Color3.fromRGB(220,200,255)
aimbotButton.TextColor3 = Color3.fromRGB(55, 20, 90)
aimbotButton.Font = Enum.Font.GothamBold
aimbotButton.TextSize = 20
aimbotButton.Text = "Ativar Aimbot"
aimbotButton.Parent = categoryFrames[2]
local btnCorner2 = Instance.new("UICorner")
btnCorner2.CornerRadius = UDim.new(0, 10)
btnCorner2.Parent = aimbotButton

local aimbotStatus = Instance.new("TextLabel")
aimbotStatus.Size = UDim2.new(1, 0, 0, 60)
aimbotStatus.Position = UDim2.new(0, 0, 0.55, 0)
aimbotStatus.BackgroundTransparency = 1
aimbotStatus.Text = "Status: Desativado"
aimbotStatus.TextColor3 = Color3.fromRGB(30, 30, 60)
aimbotStatus.Font = Enum.Font.Gotham
aimbotStatus.TextSize = 18
aimbotStatus.Parent = categoryFrames[2]

-- Função para ativar o Aimbot Universal Exunys
local function activateAimbot()
    if aimbotModule and aimbotModule.Exit then aimbotModule:Exit() end
    --[[ Universal Aimbot Module by Exunys ]]
    local game, workspace = game, workspace
    local getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick = getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick
    local Vector2new, Vector3zero, CFramenew, Color3fromRGB, Color3fromHSV, Drawingnew, TweenInfonew = Vector2.new, Vector3.zero, CFrame.new, Color3.fromRGB, Color3.fromHSV, Drawing.new, TweenInfo.new
    local getupvalue, mousemoverel, tablefind, tableremove, stringlower, stringsub, mathclamp = debug.getupvalue, mousemoverel or (Input and Input.MouseMove), table.find, table.remove, string.lower, string.sub, math.clamp
    local GameMetatable = getrawmetatable and getrawmetatable(game) or {
        __index = function(self, Index) return self[Index] end, __newindex = function(self, Index, Value) self[Index] = Value end
    }
    local __index = GameMetatable.__index
    local __newindex = GameMetatable.__newindex
    local getrenderproperty, setrenderproperty = getrenderproperty or __index, setrenderproperty or __newindex
    local GetService = __index(game, "GetService")
    local RunService = GetService(game, "RunService")
    local UserInputService = GetService(game, "UserInputService")
    local TweenService = GetService(game, "TweenService")
    local Players = GetService(game, "Players")
    local LocalPlayer = __index(Players, "LocalPlayer")
    local Camera = __index(workspace, "CurrentCamera")
    local FindFirstChild, FindFirstChildOfClass = __index(game, "FindFirstChild"), __index(game, "FindFirstChildOfClass")
    local GetDescendants = __index(game, "GetDescendants")
    local WorldToViewportPoint = __index(Camera, "WorldToViewportPoint")
    local GetPartsObscuringTarget = __index(Camera, "GetPartsObscuringTarget")
    local GetMouseLocation = __index(UserInputService, "GetMouseLocation")
    local GetPlayers = __index(Players, "GetPlayers")
    local RequiredDistance, Typing, Running, ServiceConnections, Animation, OriginalSensitivity = 2000, false, false, {}
    local Connect, Disconnect = __index(game, "DescendantAdded").Connect
    if ExunysDeveloperAimbot and ExunysDeveloperAimbot.Exit then ExunysDeveloperAimbot:Exit() end

    getgenv().ExunysDeveloperAimbot = {
        DeveloperSettings = {
            UpdateMode = "RenderStepped",
            TeamCheckOption = "TeamColor",
            RainbowSpeed = 1
        },
        Settings = {
            Enabled = true,
            TeamCheck = false,
            AliveCheck = true,
            WallCheck = false,
            OffsetToMoveDirection = false,
            OffsetIncrement = 15,
            Sensitivity = 0,
            Sensitivity2 = 3.5,
            LockMode = 1,
            LockPart = "Head",
            TriggerKey = Enum.UserInputType.MouseButton2,
            Toggle = false
        },
        FOVSettings = {
            Enabled = true,
            Visible = true,
            Radius = 90,
            NumSides = 60,
            Thickness = 1,
            Transparency = 1,
            Filled = false,
            RainbowColor = false,
            RainbowOutlineColor = false,
            Color = Color3fromRGB(255, 255, 255),
            OutlineColor = Color3fromRGB(0, 0, 0),
            LockedColor = Color3fromRGB(255, 150, 150)
        },
        Blacklisted = {},
        FOVCircleOutline = Drawingnew("Circle"),
        FOVCircle = Drawingnew("Circle")
    }
    local Environment = getgenv().ExunysDeveloperAimbot
    setrenderproperty(Environment.FOVCircle, "Visible", false)
    setrenderproperty(Environment.FOVCircleOutline, "Visible", false)
    local FixUsername = function(String)
        local Result
        for _, Value in next, GetPlayers(Players) do
            local Name = __index(Value, "Name")
            if stringsub(stringlower(Name), 1, #String) == stringlower(String) then Result = Name end
        end
        return Result
    end
    local GetRainbowColor = function()
        local RainbowSpeed = Environment.DeveloperSettings.RainbowSpeed
        return Color3fromHSV(tick() % RainbowSpeed / RainbowSpeed, 1, 1)
    end
    local ConvertVector = function(Vector) return Vector2new(Vector.X, Vector.Y) end
    local CancelLock = function()
        Environment.Locked = nil
        local FOVCircle = Environment.FOVCircle
        setrenderproperty(FOVCircle, "Color", Environment.FOVSettings.Color)
        __newindex(UserInputService, "MouseDeltaSensitivity", OriginalSensitivity)
        if Animation then Animation:Cancel() end
    end
    local GetClosestPlayer = function()
        local Settings = Environment.Settings
        local LockPart = Settings.LockPart
        if not Environment.Locked then
            RequiredDistance = Environment.FOVSettings.Enabled and Environment.FOVSettings.Radius or 2000
            for _, Value in next, GetPlayers(Players) do
                local Character = __index(Value, "Character")
                local Humanoid = Character and FindFirstChildOfClass(Character, "Humanoid")
                if Value ~= LocalPlayer and not tablefind(Environment.Blacklisted, __index(Value, "Name")) and Character and FindFirstChild(Character, LockPart) and Humanoid then
                    local PartPosition, TeamCheckOption = __index(Character[LockPart], "Position"), Environment.DeveloperSettings.TeamCheckOption
                    if Settings.TeamCheck and __index(Value, TeamCheckOption) == __index(LocalPlayer, TeamCheckOption) then continue end
                    if Settings.AliveCheck and __index(Humanoid, "Health") <= 0 then continue end
                    if Settings.WallCheck then
                        local BlacklistTable = GetDescendants(__index(LocalPlayer, "Character"))
                        for _, Value in next, GetDescendants(Character) do BlacklistTable[#BlacklistTable + 1] = Value end
                        if #GetPartsObscuringTarget(Camera, {PartPosition}, BlacklistTable) > 0 then continue end
                    end
                    local Vector, OnScreen, Distance = WorldToViewportPoint(Camera, PartPosition)
                    Vector = ConvertVector(Vector)
                    Distance = (GetMouseLocation(UserInputService) - Vector).Magnitude
                    if Distance < RequiredDistance and OnScreen then
                        RequiredDistance, Environment.Locked = Distance, Value
                    end
                end
            end
        elseif (GetMouseLocation(UserInputService) - ConvertVector(WorldToViewportPoint(Camera, __index(__index(__index(Environment.Locked, "Character"), LockPart), "Position")))).Magnitude > RequiredDistance then
            CancelLock()
        end
    end
    local Load = function()
        OriginalSensitivity = __index(UserInputService, "MouseDeltaSensitivity")
        local Settings, FOVCircle, FOVCircleOutline, FOVSettings, Offset = Environment.Settings, Environment.FOVCircle, Environment.FOVCircleOutline, Environment.FOVSettings
        ServiceConnections.RenderSteppedConnection = Connect(__index(RunService, Environment.DeveloperSettings.UpdateMode), function()
            local OffsetToMoveDirection, LockPart = Settings.OffsetToMoveDirection, Settings.LockPart
            if FOVSettings.Enabled and Settings.Enabled then
                for Index, Value in next, FOVSettings do
                    if Index == "Color" then continue end
                    if pcall(getrenderproperty, FOVCircle, Index) then
                        setrenderproperty(FOVCircle, Index, Value)
                        setrenderproperty(FOVCircleOutline, Index, Value)
                    end
                end
                setrenderproperty(FOVCircle, "Color", (Environment.Locked and FOVSettings.LockedColor) or FOVSettings.RainbowColor and GetRainbowColor() or FOVSettings.Color)
                setrenderproperty(FOVCircleOutline, "Color", FOVSettings.RainbowOutlineColor and GetRainbowColor() or FOVSettings.OutlineColor)
                setrenderproperty(FOVCircleOutline, "Thickness", FOVSettings.Thickness + 1)
                setrenderproperty(FOVCircle, "Position", GetMouseLocation(UserInputService))
                setrenderproperty(FOVCircleOutline, "Position", GetMouseLocation(UserInputService))
            else
                setrenderproperty(FOVCircle, "Visible", false)
                setrenderproperty(FOVCircleOutline, "Visible", false)
            end
            if Running and Settings.Enabled then
                GetClosestPlayer()
                Offset = OffsetToMoveDirection and __index(FindFirstChildOfClass(__index(Environment.Locked, "Character"), "Humanoid"), "MoveDirection") * (mathclamp(Settings.OffsetIncrement, 1, 30) / 10) or Vector3zero
                if Environment.Locked then
                    local LockedPosition_Vector3 = __index(__index(Environment.Locked, "Character")[LockPart], "Position")
                    local LockedPosition = WorldToViewportPoint(Camera, LockedPosition_Vector3 + Offset)
                    if Environment.Settings.LockMode == 2 then
                        mousemoverel((LockedPosition.X - GetMouseLocation(UserInputService).X) / Settings.Sensitivity2, (LockedPosition.Y - GetMouseLocation(UserInputService).Y) / Settings.Sensitivity2)
                    else
                        if Settings.Sensitivity > 0 then
                            Animation = TweenService:Create(Camera, TweenInfonew(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFramenew(Camera.CFrame.Position, LockedPosition_Vector3)})
                            Animation:Play()
                        else
                            __newindex(Camera, "CFrame", CFramenew(Camera.CFrame.Position, LockedPosition_Vector3 + Offset))
                        end
                        __newindex(UserInputService, "MouseDeltaSensitivity", 0)
                    end
                    setrenderproperty(FOVCircle, "Color", FOVSettings.LockedColor)
                end
            end
        end)
        ServiceConnections.InputBeganConnection = Connect(__index(UserInputService, "InputBegan"), function(Input)
            local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle
            if Typing then return end
            if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
                if Toggle then
                    Running = not Running
                    if not Running then CancelLock() end
                else
                    Running = true
                end
            end
        end)
        ServiceConnections.InputEndedConnection = Connect(__index(UserInputService, "InputEnded"), function(Input)
            local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle
            if Toggle or Typing then return end
            if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
                Running = false
                CancelLock()
            end
        end)
    end
    ServiceConnections.TypingStartedConnection = Connect(__index(UserInputService, "TextBoxFocused"), function() Typing = true end)
    ServiceConnections.TypingEndedConnection = Connect(__index(UserInputService, "TextBoxFocusReleased"), function() Typing = false end)
    function Environment.Exit(self)
        assert(self, "EXUNYS_AIMBOT-V3.Exit: Missing parameter #1 \"self\" <table>.")
        for Index, _ in next, ServiceConnections do Disconnect(ServiceConnections[Index]) end
        Load = nil; ConvertVector = nil; CancelLock = nil; GetClosestPlayer = nil; GetRainbowColor = nil; FixUsername = nil
        self.FOVCircle:Remove()
        self.FOVCircleOutline:Remove()
        getgenv().ExunysDeveloperAimbot = nil
    end
    function Environment.Restart()
        for Index, _ in next, ServiceConnections do Disconnect(ServiceConnections[Index]) end
        Load()
    end
    function Environment.Blacklist(self, Username)
        assert(self, "EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #1 \"self\" <table>.")
        assert(Username, "EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #2 \"Username\" <string>.")
        Username = FixUsername(Username)
        assert(self, "EXUNYS_AIMBOT-V3.Blacklist: User "..Username.." couldn't be found.")
        self.Blacklisted[#self.Blacklisted + 1] = Username
    end
    function Environment.Whitelist(self, Username)
        assert(self, "EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #1 \"self\" <table>.")
        assert(Username, "EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #2 \"Username\" <string>.")
        Username = FixUsername(Username)
        assert(Username, "EXUNYS_AIMBOT-V3.Whitelist: User "..Username.." couldn't be found.")
        local Index = tablefind(self.Blacklisted, Username)
        assert(Index, "EXUNYS_AIMBOT-V3.Whitelist: User "..Username.." is not blacklisted.")
        tableremove(self.Blacklisted, Index)
    end
    function Environment.GetClosestPlayer()
        GetClosestPlayer()
        local Value = Environment.Locked
        CancelLock()
        return Value
    end
    Environment.Load = Load
    setmetatable(Environment, {__call = Load})
    aimbotModule = Environment
    aimbotModule:Load()
end

local function deactivateAimbot()
    if aimbotModule and aimbotModule.Exit then
        aimbotModule:Exit()
        aimbotModule = nil
    end
end

aimbotButton.MouseButton1Click:Connect(function()
    if not aimbotEnabled then
        activateAimbot()
        aimbotEnabled = true
        aimbotButton.Text = "Desativar Aimbot"
        aimbotButton.BackgroundColor3 = Color3.fromRGB(200,255,200)
        aimbotStatus.Text = "Status: Ativado"
    else
        deactivateAimbot()
        aimbotEnabled = false
        aimbotButton.Text = "Ativar Aimbot"
        aimbotButton.BackgroundColor3 = Color3.fromRGB(220,200,255)
        aimbotStatus.Text = "Status: Desativado"
    end
end)
MainFrame:GetPropertyChangedSignal("Visible"):Connect(function()
    if not MainFrame.Visible and aimbotEnabled then
        deactivateAimbot()
        aimbotButton.Text = "Ativar Aimbot"
        aimbotButton.BackgroundColor3 = Color3.fromRGB(220,200,255)
        aimbotStatus.Text = "Status: Desativado"
        aimbotEnabled = false
    end
end)

-- =============== ABA MISC ================
local humanoid = nil
local function getHumanoid()
    if not LocalPlayer.Character then return nil end
    local h = LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid")
    return h
end

local miscFrame = categoryFrames[3]

local function makeSlider(labelText, minValue, maxValue, defaultValue, posY, callback)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 120, 0, 28)
    label.Position = UDim2.new(0, 18, 0, posY)
    label.BackgroundTransparency = 1
    label.Text = labelText
    label.Font = Enum.Font.GothamBold
    label.TextSize = 15
    label.TextColor3 = Color3.fromRGB(55, 20, 90)
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = miscFrame

    local sliderBG = Instance.new("Frame")
    sliderBG.Size = UDim2.new(0, 165, 0, 10)
    sliderBG.Position = UDim2.new(0, 135, 0, posY+8)
    sliderBG.BackgroundColor3 = Color3.fromRGB(220,220,240)
    sliderBG.BorderSizePixel = 0
    sliderBG.Parent = miscFrame
    local bgCorner = Instance.new("UICorner")
    bgCorner.CornerRadius = UDim.new(0,5)
    bgCorner.Parent = sliderBG

    local sliderFill = Instance.new("Frame")
    sliderFill.Size = UDim2.new((defaultValue-minValue)/(maxValue-minValue), 0, 1, 0)
    sliderFill.BackgroundColor3 = Color3.fromRGB(170,0,255)
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderBG
    local fillCorner = Instance.new("UICorner")
    fillCorner.CornerRadius = UDim.new(0,5)
    fillCorner.Parent = sliderFill

    local knob = Instance.new("Frame")
    knob.Size = UDim2.new(0,16,0,16)
    knob.Position = UDim2.new((defaultValue-minValue)/(maxValue-minValue), -8, 0.5, -8)
    knob.BackgroundColor3 = Color3.fromRGB(120,0,180)
    knob.Parent = sliderBG
    local knobCorner = Instance.new("UICorner")
    knobCorner.CornerRadius = UDim.new(1,0)
    knobCorner.Parent = knob

    local valueLabel = Instance.new("TextLabel")
    valueLabel.Size = UDim2.new(0, 50, 0, 18)
    valueLabel.Position = UDim2.new(0, 310, 0, posY)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(defaultValue)
    valueLabel.Font = Enum.Font.Gotham
    valueLabel.TextSize = 14
    valueLabel.TextColor3 = Color3.fromRGB(55, 20, 90)
    valueLabel.TextXAlignment = Enum.TextXAlignment.Left
    valueLabel.Parent = miscFrame

    local dragging = false
    local function setValueFromX(x)
        local rel = math.clamp((x-sliderBG.AbsolutePosition.X)/sliderBG.AbsoluteSize.X, 0, 1)
        local value = math.floor((minValue + (maxValue-minValue)*rel) * 100) / 100
        sliderFill.Size = UDim2.new(rel,0,1,0)
        knob.Position = UDim2.new(rel, -8, 0.5, -8)
        valueLabel.Text = tostring(value)
        callback(value)
    end
    knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    UIS.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    UIS.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            setValueFromX(input.Position.X)
        end
    end)
    sliderBG.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            setValueFromX(input.Position.X)
            dragging = true
        end
    end)
    callback(defaultValue)
end

makeSlider("Velocidade:",16,100,16,30,function(val)
    humanoid = getHumanoid()
    if humanoid then
        humanoid.WalkSpeed = val
    end
end)
makeSlider("Pulo:", 16, 150, 50, 80, function(val)
    humanoid = getHumanoid()
    if humanoid then
        humanoid.JumpPower = val
    end
end)
-- Atualiza sempre que o personagem respawnar
LocalPlayer.CharacterAdded:Connect(function(char)
    humanoid = getHumanoid()
end)
